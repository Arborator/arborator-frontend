export default {
  failed: 'Action failed',
  success: 'Action successful',
  oops: 'Something went wrong: ',
  error403: 'Hey you! You do not have the permissions for this action. Please contact the administrator.',
  error401: 'Hey you! Please log in to do any further actions of that type.',
  error404: 'There is no such resource in ArboratorGrew backend',
  error404page: "Doh! There's nothing here...",
  error415: 'Hey you! Only CONLL files with UTF-8 encoding format are supported.',
  welcomeback: 'Welcome back to Arborator!',
  loginbtn: 'Log in',
  loginselector: 'Connect via',
  switchLanguage: 'Switch the language of the user interface',
  documentation: 'See the documentation',
  feedback: 'Any questions, feature requests or bug report ? See our github issues page',
  darkMode: 'Toggle dark mode',
  projectAdmin: 'You are admin of this project',
  userInformation: 'You are connected with ',
  settings: 'Settings',
  admin: 'Admin',
  fullscreen: 'Fullscreen',
  navhome: 'Home',
  navprojects: 'Projects',
  navsettings: 'Settings',
  navklang: 'Klang',

  // confirm action dialog
  confirmAction: {
    title: 'Are you sure?',
    message: 'You are about to perform an irrevocable action. Do you really want to proceed?',
    warning: ['Please type something', 'The project name does not correspond'],
    hint: 'Type the project name',
    label: 'Your project name*',
  },

  // first page (the index)
  homepage: {
    title: 'A collaborative annotation tool for the treebank developpement.',
    subtitle: 'ArboratorGrew opens up new paths of collectively creating, updating, maintaining, and curating syntactic treebanks.',
    accessTreebankBtn: 'Access Treebanks',
    popularProjects: 'Popular projects',
    aboutAg: 'About ArboratorGrew',
    aboutUs: 'About us',
    descriptionCard: {
      title: 'A collaborative annotation tool for treebank development',
      subtitle: "An easy to use graphic annotation interface makes it annotation the best part of a linguist's day.",
      content: [
        'Just drag a word on the other to make a dependency relation. Just click on a word to change its features. Just choose the words to make them tokens. The dependency set, the tagset, and the feature set are fully configurable. We provide ready-made configurations for',
        'and',
      ],
      tooltipSud: 'SUD: The surface-syntactic, distribution-based version of Universal Dependencies',
      tooltipUd: 'Universal Dependencies: The amazing collaborative treebank annotation project providing 150 treebanks in 90 languages',
    },
    grewCard: {
      title: 'Search with a powerful graph grammar',
      subtitle: 'Modify the search results directly in the Web interface',
      content: [
        'A good treebank is a lot about curation, about finding the problems and correcting them coherently. With Arborator-Grew, there is no more back and forth between different websites or twisting your mind with complex greps in CoNLL files. Well, you got to learn the',
        "syntax, but that's a breeze with all the great examples and tutorials provided.",
      ],
      tooltipGrew: 'The grew graph grammar',
    },
    sourceCard: {
      title: 'Source code',
      content: [
        'Head over to',
        'to have a look and grab the code.',
        'Get involved and give us feedback on the',
        'issue page of this Arborator front-end',
      ],
      tooltipGit: 'our GitHub page',
    },
    citeCard: {
      title: 'Cite us',
    },
    toolsCard: {
      title: 'Other Arborator tools',
      content: [
        'If you just want to look at a CoNLL file quickly, check out this',
        'The legacy Arborator is still running here',
        'For quick graphical modification of a CoNLL file',
      ],
    },
    footertextmadewith: 'Made with',
    textGetUserEmailDialog: [
      'For the proper management of the service, we may need to contact you, especially for the removal of unused projects. Your email will only be used for communications regarding ArboratorGrew and will not be shared with third parties.',
      'You may refuse to the communication of your email, but if you do, we reserve the right to delete your projects without notice.',
      'You can modify or delete your contact email at any time from your account.',
    ],
    checkboxEmailDialog: [
      'I understand that my email will be stored on the ArboratorGrew server located in Europe.',
      'I refuse to share my email.',
    ],
    inputErrorText: ['Please type something', 'Please type valid email'],
    submitEmailBtn: 'Soumettre',
  },

  // list of projects page
  projectHub: {
    tooltipCreaProject: ['Login your account to create new project', 'Create a new project'],
    tooltipListView: 'Show list view',
    tooltipGridView: 'Show grid view',
    newProject: 'New project',
    title: 'Projects',
    sample: 'sample',
    samples: 'samples',
    rightClickDelete: 'Delete',
    rightClickRename: 'Rename',
    emptySearch: 'Search for project',
    projectCategory: 'Category',
    allProjects: 'All the projects',
    myProjects: 'My Projects',
    myOldProjects: 'My Project Purgatory',
    otherProjects: 'Other Projects',
    otherOldProjects: 'The Project Purgatory',
    lastAccess: 'Last access',
    lastWriteAccess: 'Last modification',
  },
  renameProject: {
    title: 'Rename the project',
    inputLabel: 'Project name',
    renameBtn: 'Rename',
    inputError: 'please type something',
  },

  // page when you enter a project ( samples info, etc)
  projectView: {
    project: 'Project',
    createdBy: 'Created by',
    settings: 'Settings',
    tooltipSettings: 'Modify project settings',
    newSample: 'New Sample',
    tooltipAddSample: 'Add new samples',
    projectOverview: 'Project Overview',
    tooltipSyncGit: 'Synchronize with Github',
    tooltipSynchronizedProject: 'This project is synchronized with',
    projectTabs: ['Samples', 'Grew', 'Relation table', 'Lexicon', 'Parser', 'Constructicon'],
  },

  // project table that contains samples informations
  projectTable: {
    tooltipSearch: 'Search a sample',
    search: 'Search',
    users: 'User',
    tableFields: ['Name', 'Nb sentences', 'Nb tokens', 'Trees from', 'Blind annotation level'],
  },

  // Component project options
  projectOptions: {
    sample: ['Sample', 'Samples'],
    tooltipDeleteSample: 'Remove selected samples',
    tooltipExportSample: 'Export selected samples',
    tooltipExportEvaluation: 'Export evaluations from selected samples',
    removeUserTrees: 'Remove user trees',
  },

  // dialog window which displays create project card
  createProjectCard: {
    title: 'Create New Project',
    projectName: 'Project name',
    visibilityMode: ['Private', 'Visible', 'Open'],
    blindAnnotationMode: 'blind annotation mode',
    create: 'Create',
    createMessage: 'is created',
    inputWarning: 'Please type something',
    selectWarning: 'Please select something',
    corpusConfig: 'Corpus configuration',
    enterLanguage: 'Enter language',
    annotSettings: 'Annotation settings',
    annotMode: 'Annotation mode',
    blindAnnot: 'Blind annotation',
    blindAnnotCaption: "In this case the annotators will not be able to see others' trees.",
    collaborativeMode: 'Collaborative Mode',
    collaborativeAnnot: 'Collaborative Annotation',
    collaborativeAnnotCaption:
      'If you uncheck this option, you will be the only user to maintain this project, and only validated trees will be used. This action is irreversible, so please make sure you really want to uncheck this option.',
  },

  exportSamples: {
    title: 'Select the trees you want to export',
    exportMyTrees: 'Export my trees',
    exportValidatedTrees: 'Export validated trees',
    exportRecentTrees: 'Export the most recent trees',
    exportTreesOfUsers: 'Export trees from other users',
    selectOtherUsers: 'Select the users whose trees you want to export',
    export: 'Export',
  },

  grewSearch: {
    selectSample: 'Select sample, keep it empty if you want to select all samples',
    treesType: 'Search in',
    recentTree: 'Recent trees',
    userTree: 'My trees',
    validatedTree: 'Validated trees',
    pendingTree: "Pending trees (Trees of sentence that's not validated yet)",
    allTree: 'All trees',
    baseTree: 'Base trees',
    otherTree: 'Tress of specific user',
    search: 'Search',
    rewrite: 'Rewrite',
    tryRules: 'Try rules',
    grewSearchTooltip: 'Examples of Grew search statements',
    grewRewriteTooltip: 'Examples of Grew search and replacement statements',
    showDiffFaturesSelect: 'Select the set of features',
    showDiffFeaturesTooltip: 'if empty and at least two diff users are selected, all features will be taken into account for diff',
    applyRule: 'Apply rule',
    applyRuleTooltip: 'Select at least one tree to which you wish to apply the rule',
    selectAllTooltip: 'Select All',
    btnDisabledTooltip: 'You need to select first the username',
    selectUser: 'Select username',
  },

  relationTable: {
    generateTable: 'Generate relations table',
    selectEdge: 'Select a relation',
    filterRelations: 'Filter dependency relations',
  },

  // window which displays project settings
  projectSettings: {
    title: 'Settings',
    windowClose: 'Close',
    toggleVisibility: 'Visibility',
    toggleVisibilityCaption:
      'Private projects limit access and annotation, visible projects limit annotation and open projects allow anyone to view and contribute',
    togglePrivateCaption: [
      'Private projects restrain access and annotation.',
      'Visible projects restrain only annotation.',
      'Open projects allow anyone to view and contribute their annotation.',
    ],
    toggleBlindAnnotationMode: 'Blind annotation mode',
    toggleBlindAnnotationModeCaption: 'if true, the project has blind annotation mode properties',
    toggleDiffMode: 'Diff mode',
    toggleDiffModeCaption: 'if true, the project has diff mode properties',
    chooseUserDiff: 'Diff user',
    chooseUserDiffCaption: 'user that will be used as reference for the comparaison',
    selectDiffUser: 'Select diff user',
    projectLanguage: 'Language',
    projectLanguageCaption: 'The project language is: ',
    shownFeaturesPanel: 'Shown Features',
    shownFeaturesTokens: 'Choose the features to be shown under each token',
    shownFeaturesSentences: 'Choose the features to be shown under each sentence',
    annotationSettingsInput: 'Annotation settings',
    annotationSettingsSave: 'Save annotation settings',
    checkAnnotation: 'This looks like reasonable Json',
    resetUD: 'reset to UD',
    resetSUD: 'reset to SUD',
    freezeProject: 'Freeze project',
    freezeProjectCaption: 'Only the owner can freeze this project',
  },
  settingsPage: {
    title: 'Personal information',
    saveModifications: 'Save Modification',
    firstName: 'First Name',
    familyName: 'Last Name',
    saveModificationMessage: 'Your personal information is updated',
  },
  github: {
    synchronizeBtn: 'Synchronize with github',
    skipSync: 'Skip synchronization',
    chooseRepoOwner: 'Repository Owner',
    search: 'Search a repository',
    select: 'Select',
    noGithubRepos: 'You need to create your first Github Repository',
    selectBranch: 'Select a branch to clone',
    arboratorgrewBranch: 'Create new branch and use it for the commits from ArboratorGrew.',
    newBranchName: 'Name of branch to use',
    defaultBranch: ' Use the selected branch (Be careful if you work with a repository that has many collaborators).',
    synchronize: 'Synchronize',
    syncBtnTooltip: 'You need to set the branch name first',
    syncWarningMessage: 'The repository is large, the synchronization will take some time',
    synchronizeMessage: 'is synchronized with',
    commitNotif: ['You have', 'change', 'changes', "You don't have changes to commit"],
    pullNotif: ['Check pull', 'Refresh to see if there are changes to pull', 'Pull available', 'Pull changes'],
    pullRequest: 'Open new Pull request from your changes',
    removeSync: ['Remove synchronization', 'Your project is synchronized with'],
    deletionWarning: 'This action will also remove the file from your synchronized github repository.',
    commitDialog: {
      title: 'Commit the changes',
      commitInput: 'Commit message',
      commitTreeSelect: 'Select the trees to commit',
      commitTreeOptions: ['My trees', 'Most recent trees', 'Validated trees'],
      commitMessage: 'New commit to',
    },
  },
  sentenceCard: {
    selectTooltip: 'Select the sentence to split the tokens',
    annotationErrors: 'See your annotation errors',
    saveBaseTree: 'Save as base_tree',
    saveTree: ['Save tree', 'as'],
    validateTree: 'Validate this tree',
    addTag: 'Add tags to this tree',
    editMetadata: "Edit this trees's metadata",
    multiEditDial: 'Base_tree edition',
    diffMode: ['Enter', 'Leave', 'Diff mode'],
    treeLink: 'Get direct link to this tree',
    treeConll: 'Get CoNLL-U of this tree',
    treeSVG: 'Get SVG of this tree',
    treePNG: 'Get PNG of this tree',
    addToken: 'Add new token',
    editToken: 'Edit tokens',
    saveModif: 'The tree has some pendings modifications not saved',
    modified: ['Modified', 'ago'],
    modifTime: ['senconds', 'minutes', 'hours', 'days'],
    automaticParsing: 'Automatic parsing',
    conllText: 'Text Conll',
    statisticDial: 'Stastistics of the current opened tree',
  },
  tagsMenu: {
    enterTags: 'Enter tags',
    addTags: 'Add',
    createNewTag: 'Press enter to create this tag',
    tagsFormatError: 'You cannot add an empty tag or a tag containing ","',
  },
  attributeTable: {
    addFeature: 'Add new feature',
    eraseFeature: 'Erase the attribute',
    features: 'Features of',
    category: ['Select a category for', 'Category'],
    metadata: 'Metadata of this sentence',
    relation: ['Select a relation going from', 'to', 'current'],
    tokenReplaceDial: ['Replacing', 'by', 'Changing tokens breaks the comparability of different annotations of the same sentence', 'Replacement'],
  },
  constructicon: {
    uploadBtn: 'Upload constructicon',
    uploadTooltip: 'Upload existing constructicon',
    downloadBtn: 'Download constructicon',
    downloadTooltip: 'Download existing constructicon',
    searchLabel: 'Search items ...',
    addNewItem: 'Add new item',
    title: 'Title',
    description: 'Description',
    grewQuery: 'Grew Query',
    tagTooltip: 'Add new tags',
    saveBtn: 'Save',
    editBtn: 'Edit',
    deleteBtn: 'Delete',
    search: 'Search',
  },
  userSelect: {
    share: 'Share',
    addUser: 'Add new user',
    roles: ['Admin', 'Validator', 'Annotator', 'Guest'],
    revokeAccess: 'Revoke Access',
    noResult: 'No result',
    copyLink: 'Copy Link',
    role: 'Role',
    owner: 'Owner',
    userAccess: 'Users with access',
    sendNotfi: 'Send notification',
  },
  parser: {
    parserChoices: ['Train and Parse', 'Train Only', 'Parse Only'],
    trainBtn: 'Train new model',
    baseModel: 'Base model',
    noBaseModelSelected: 'No base model is selected',
    trainSettings: 'Train settings',
    trainOnAllfiles: 'Train on All samples',
    filesToTrain: 'Samples to train on',
    filesToParse: 'Samples to parse',
    customUser: 'Custom Training user',
    trainingUser: 'Training user',
    parseBtn: 'Parse samples',
    parseSettings: 'Parse settings',
    parseAllFiles: 'Parse all samples',
    parseSuffix: 'Parser suffix (for parsed sentences)',
    parseHint: 'Parsing will go under the name `parser',
    customParserUser: 'Custom parsing user',
    parseUser: 'Parsing user',
    pipelineSummary: 'Pipeline Summary',
    trainingSents: 'training sentences',
    parseSents: 'parsing sentences',
    timeEstimated: 'estimated time',
    currentTask: 'Current task :',
    removeModel: 'Remove pretrained Model',
    disableRemoveBtnTooltip: ['Select pretrained model', 'You do not have access to remove this pretrained model'],
    searchLabel: 'Search a model',
    columnsToKeep: 'Select the columns to keep in parsing',
    startBtn: 'Start',
    modelsTableColumns: ['Project', 'Language', 'Sentence number', 'Trained', 'Best LAS', 'Epoch'],
  },
  uploadSample: {
    inputFile: 'Input file',
    inputText: 'Input text',
    tokenizeSelect: 'select Tokenize option',
    tokenizeOptions: ['Tokenize plain text', 'Horizontal', 'Vertical'],
    languageSelect: 'Choose the language',
    languageOptions: ['English', 'French'],
    sampleName: 'Sample Name',
    horizontalHint: 'Each sentence on a separate line, the tokens are separated by spaces.',
    verticalHint: 'Each token on a separate line, with an empty line indicating the end of sentence.',
    customUsername: "Custom UserId",
    text: 'text',
    tokenizeBtn: 'Tokenize',
    selectFiles: 'Select one or multiple conll files',
    uploadFileLabel: 'Pick or drop files',
    uploadFileTooltip: 'Select file to upload',
    reservedUsernameError: 'is reserved username for ArboratorGrew',
    emptyUsernameError: 'You can not upload file without userId please type something',
    userIdConfig: 'User Id configuration',
    userIdOptions: [
      'Import your trees under your username', 
      'Import your trees as validated trees', 
      'Import your trees as base_tree',
      'Import your trees using custom username'
    ],
  },
  advancedFilter: {
    textFilter: 'Text filter',
    applyFilter: 'Apply filter',
    advancedFilter: 'Advanced Filter',
    clearAll: 'Clear All',
    usersSelect: 'Select set of users',
    filterOperators: ['Have', 'Not Have'],
    filterChoices: ['Trees', 'Differences'],
  },
  tokenReplaceDialog: {
    merge: 'Merge',
    mergeOptions: ['Merge left', 'Merge right'],
    insert: 'Insert',
    insertOptions: ['Insert before', 'Insert after'],
    split: 'Split token',
    delete: 'Delete token',
    multiWord: 'Multiword',
    firstToken: 'First token',
    secondToken: 'Second token',
    multiWordToken: 'Add multiword token',
  },
  multiEditDialog: {
    text: 'Select what you want to remove',
    all: 'All',
  },
  lexicon: {
    selectSample: 'Select sample, keep it empty if you want to select all samples',
    lexiconOptions: [
      'Get the lexicon of my trees',
      'Get the lexicon of my recent trees',
      'Get the lexicon of all the trees',
      'Get the lexicon of the recent trees',
      'Get the lexicon of validated trees',
    ],
    lexiconTitle: 'Select one or multiple features for the Lexicon',
    similarFeatures: 'Similar features',
    ambiguousFeatures: 'Ambiguous features',
    selectTreeType: 'Select the tree type',
    tooltipExportLexicon: ['export to tsv', 'export to json'],
    tooltipRuleGrewLexicon: 'Generate Grew rule',
    tooltipUnstageModifiedItem: 'Unstage selected lexicon changes',
    replaceEntry: 'Replace entry',
  },
  sentenceSegmentation: {
    title: 'sentence Segmentation',
    selectOptionLabel: 'Select segmentation option',
    segmentOptions: ['Split', 'Merge'],
    selectSplitLabel: 'Select the token from which the second sentence will start',
    showResultBtn: 'Show result',
    editGeneratedMeta: 'Edit the generated metadata',
    saveResults: 'Save results',
    sentIdWarningMsg: [
      'This sent_id is already used, choose another one',
      'The sent_id is the same sent_id used in the second sentence',
      'The sent_id is the same sent_id used in the first sentence',
    ],
    selectMergeLabel: 'Select the sent_id of the phrase you wish to merge with the current phrase',
  },
  grewHistory: {
    historyBtn: 'History',
    searchLabel: 'Search in the history',
    selectLabel: 'Select category',
    modifiedSentences: 'Modified Sentences',
    noModifiedSentences: 'No modified sentences',
    noSearchResults: 'No search results',
    historyTypes: ['All', 'Search', 'Rewrite', 'Favorites'],
    deleteHistory: 'Delete History',
    deleteHistoryItem: 'Delete request from history',
    favoriteTooltip: ['Add this request to the favorites', 'Remove this request from the favorites'],
    copyTooltip: 'Copy this request',
    deleteTooltip: 'Delete all the history',
  },
  projectStats: {
    users: 'Users',
    samples: 'Samples',
    trees: 'Trees',
    tokens: 'Tokens',
    activityOverview: 'Activity overview',
    topContributor: 'Top contributor',
    annotationProgress: 'Annotation Progress',
    lastAccess: 'Last Access',
    by: 'by',
    usedTags: 'Used tags',
  },
  conllDial: {
    title: 'Conll Dialog',
    tableView: 'Table View',
    conllView: 'Conll View',
    copyConll: 'Copy Conll',
  },
  cancel: 'Cancel',
  delete: 'Delete',
  confirm: 'Confirm',
  close: 'Close',
  // Klang
  Klang: {
    projects: 'Klang Projects',
  },
};
